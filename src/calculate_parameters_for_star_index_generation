#!/usr/bin/env python

from argparse import RawTextHelpFormatter
import argparse
import math


def parseCommandLineArguments():
    parser = argparse.ArgumentParser( prog = "calculate_parameters_for_star_index_generation", description = "Calculates parameters for generating star index", formatter_class = RawTextHelpFormatter )
    
    required_named = parser.add_argument_group( 'Required arguments' )
    optional_named = parser.add_argument_group( 'Optional arguments' )

    # Mandatory arguments
    required_named.add_argument( "--reference", help = "Enter the reference filename", required = True )
    required_named.add_argument( "--genome_sa_index_and_bases_output_filename", help = "Enter the filename where genome_sa_index_and_bases will be stored", required = True )
    required_named.add_argument( "--genome_chr_bin_n_bits_output_filename", help = "Enter the filename where genome_chr_bin_n_bits will be stored", required = True)
    
    return parser.parse_args()

def main():
    options = parseCommandLineArguments()
    
    fhr = open(options.reference,"r")
    num_chromosomes = 0
    reference_length = 0
    for line in fhr:
        if line[0]=='>':
            num_chromosomes+=1
        else:
            reference_length+=len(line.strip())
    fhr.close()
    
    genomeSAindexNbases = int(min(14, math.log2(reference_length)/2 - 1))
    genomeChrBinNbits = int(min(18,math.log2(reference_length/num_chromosomes)))
    
    open(options.genome_sa_index_and_bases_output_filename,"w").write(str(genomeSAindexNbases))
    open(options.genome_chr_bin_n_bits_output_filename,"w").write(str(genomeChrBinNbits))

if __name__ == "__main__":
    main()
